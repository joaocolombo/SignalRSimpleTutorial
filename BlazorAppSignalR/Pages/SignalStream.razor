@page "/stream"
@using Microsoft.AspNetCore.SignalR.Client

<h3>SignalStream</h3>

@foreach (var time in _time)
{
    <div>@time</div>
}

@code
{
    private List<string> _time = new();
    private HubConnection hubConnection;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7238/chat", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6ImJsYXpvciIsInN1YiI6ImJsYXpvciIsImp0aSI6ImZjZjlkNGEiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo0NDA0NiIsImh0dHBzOi8vbG9jYWxob3N0OjQ0MzE0IiwiaHR0cDovL2xvY2FsaG9zdDo1MDgyIiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzIzOCJdLCJuYmYiOjE3MDE0MzQ0MzYsImV4cCI6MTcwOTI5NjgzNiwiaWF0IjoxNzAxNDM0NDM3LCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.0Hf8RCHpkXvMq-zhUXpf6wspJ2p-3Ak41Y2ADRYa-no");
            })
            .Build();

        await hubConnection.StartAsync();

        await foreach (var item in hubConnection.StreamAsync<DateTime>("Streaming"))
        {
            _time.Add(item.ToString());
            InvokeAsync(StateHasChanged);
        }
    }

}